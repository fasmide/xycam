#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('website:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


var ws = require('ws');

var imgIncoming = new ws.Server({ server: server, path: "/imgReceive" });
imgIncoming.on('connection', function(ws) {
    console.log("connection");
    ws.on('message', function(img) {
      clientServer.clients.forEach(function (client) {
        client.send(JSON.stringify({type:'image', data: img}));
      });
    });
});

var clientServer = new ws.Server({server: server, path: '/clients'});
clientServer.on('connection', function(ws) {
  debug('A client has connected');
  ws.on('message', function(data) {
    data = JSON.parse(data);
    if (data.type == 'jog') {
      controlServer.clients.forEach(function (client) {
        client.send(JSON.stringify(data));
      });
    }
    if (data.type == 'absolutePosition') {
     controlServer.clients.forEach(function (client) {
        client.send(JSON.stringify(data));
      }); 
    }

  });
});

var controlServer = new ws.Server({server: server, path: '/control'});
controlServer.on('connection', function(ws) {
  debug('Control socket opened');
  ws.on('message', function(data) {
    data = JSON.parse(data);
    if (data.type == 'position') {
      clientServer.clients.forEach(function (client) {
        client.send(JSON.stringify(data));
      });
    }
    console.log("had ", data);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

